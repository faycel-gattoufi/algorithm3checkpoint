PROCEDURE dot_product(v1, v2)
VAR
    v1, v2 : ARRAY_OF INTEGER[]
    i : INTEGER;
    result : INTEGER := 0;
BEGIN
    FOR i FROM 0 TO v1.length - 1 STEP 1  DO
        result = result + (v1[i] * v2[i])
    END_FOR
    write(result)
END


ALGORITHM dotProduct
VAR
    vectors : ARRAY_OF INTEGER[];
    i, j : INTEGER
BEGIN
    FOR i FROM 0 TO vectors.length - 1 STEP 1  DO
        FOR j FROM i + 1 TO vectors.length - 1 STEP 1  DO
            IF (dot_product(v1[i], v2[j]) === 0) THEN
                write(v1[i] ' and ' v2[j] ' are orthogonal.')
            END_IF
        END_FOR
    END_FOR
END



FUNCTION dot_product(v1, v2) : INTEGER
VAR
    v1, v2 : ARRAY_OF INTEGER[]
    i : INTEGER;
    result : INTEGER := 0;
BEGIN
    FOR i FROM 0 TO v1.length - 1 STEP 1  DO
        result = result + (v1[i] * v2[i])
    END_FOR
    RETURN result ;
END


ALGORITHM dotProduct
VAR
    vectors : ARRAY_OF INTEGER[];
    i, j : INTEGER
BEGIN
    FOR i FROM 0 TO vectors.length - 1 STEP 1  DO
        FOR j FROM i + 1 TO vectors.length - 1 STEP 1  DO
            IF (dot_product(v1[i], v2[j]) === 0) THEN
                write(v1[i] ' and ' v2[j] ' are orthogonal.')
            END_IF
        END_FOR
    END_FOR
END 